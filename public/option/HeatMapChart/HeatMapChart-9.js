const prefixNameSource = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '$a', '$b', '$c', '$d', '$e', '$f', '$g', '$h', '$i', '$j', '$k', '$l', '$m', '$n', '$o', '$p', '$q', '$r', '$s', '$t', '$u', '$v', '$w', '$x', '$y', '$z',
    '$1a', '$1b', '$1c', '$1d', '$1e', '$1f', '$1g', '$1h', '$1i', '$1j', '$1k', '$1l', '$1m', '$1n', '$1o', '$1p', '$1q', '$1r', '$1s', '$1t', '$1u', '$1v', '$1w', '$1x', '$1y', '$1z',
    '$2a', '$2b', '$2c', '$2d', '$2e', '$2f', '$2g', '$2h', '$2i', '$2j', '$2k', '$2l', '$2m', '$2n', '$2o', '$2p', '$2q', '$2r', '$2s', '$2t', '$2u', '$2v', '$2w', '$2x', '$2y', '$2z',
    '$3a', '$3b', '$3c', '$3d', '$3e', '$3f', '$3g', '$3h', '$3i', '$3j', '$3k', '$3l', '$3m', '$3n', '$3o'
]
const suffixSourceNine = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
const nameSource = []
prefixNameSource.forEach(i => {
    suffixSourceNine.forEach(j => {
        const name = `${i}${j}`
        nameSource.push(name)
    })
})
const valueSource = [
    1, 1, 2, 1, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 4, 4, 2, 4, 4, 2,
    4, 4, 3, 4, 4, 5, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
    2, 1, 2, 3, 2, 3, 2, 3, 4, 3, 3, 4, 3, 4, 4, 3, 4, 4, 3, 4,
    4, 3, 4, 4, 5, 4, 3, 4, 3, 4, 3, 4, 5, 4, 4, 5, 4, 4, 4, 2,
    2, 1, 1, 1, 2, 4, 2, 3, 3, 3, 4, 3, 4, 4, 4, 2, 4, 4, 2, 4,
    4, 4, 4, 4, 5, 2, 4, 4, 3, 4, 2, 4, 5, 4, 4, 5, 4, 4, 2, 1,
    2, 1, 3, 2, 2, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 3, 4, 2,
    3, 3, 3, 1, 3, 3, 3, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 4, 3, 3,
    4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 2, 2,
    3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4,
    4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 3, 4, 2, 3,
    3, 3, 3, 1, 3, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4,
    4, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 3, 4, 2, 2, 3,
    3, 3, 3, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4,
    4, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 3, 4, 2, 3, 2,
    2, 2, 2, 1, 4, 4, 4, 4, 4, 5, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4,
    4, 4, 5, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 3, 3,
    5, 3, 2, 4, 4, 4, 4, 4, 4, 4, 5, 4, 3, 4, 4, 4, 4, 4, 4, 4,
    5, 4, 4, 4, 3, 3, 4, 4, 5, 4, 4, 4, 4, 4, 3, 4, 2, 3, 2, 2,
    3, 3, 5, 2, 3, 3, 5, 3, 3, 3, 4, 4, 3, 4, 4, 3, 4, 4, 5, 4,
    4, 5, 4, 1, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 3, 3, 2,
    3, 4, 3, 3, 2, 4, 4, 3, 3, 4, 4, 2, 4, 4, 2, 4, 4, 3, 5, 5,
    5, 4, 5, 4, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 2, 3, 2, 2, 2,
    2, 3, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5,
    5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 1, 5, 7, 2, 2, 3, 3, 5, 3,
    3, 5, 3, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5,
    5, 4, 5, 5, 5, 5, 5, 7, 7, 6, 6, 7, 7, 7, 4, 3, 2, 3, 3, 3,
    3, 2, 5, 5, 5, 5, 5, 2, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 1, 5, 5, 5, 1, 7, 7, 7, 7, 7, 3, 2, 2, 3, 5, 5, 3,
    3, 3, 3, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 4, 5, 5, 5, 6, 6, 6, 7, 7, 6, 7, 4, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 5, 5, 5, 5, 2, 5, 4, 2, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 1, 5, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 2, 4, 5, 5, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 6, 6, 6, 6, 6, 6, 7, 7, 1, 6, 2, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 5, 3, 5, 4, 5, 5, 5, 5, 5, 3, 5, 5, 5, 4, 5, 5, 7, 6,
    6, 6, 6, 6, 7, 7, 6, 7, 7, 7, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 1, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6,
    7, 7, 6, 7, 1, 6, 6, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
    5, 5, 5, 3, 5, 4, 5, 3, 5, 4, 5, 5, 5, 4, 5, 6, 6, 6, 6, 6,
    6, 6, 6, 7, 7, 6, 7, 7, 7, 3, 3, 3, 1, 1, 2, 3, 3, 3, 5, 5,
    5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 6, 7, 7, 6, 6, 6, 6, 6, 7,
    7, 7, 6, 1, 6, 7, 7, 7, 7, 3, 3, 3, 3, 1, 3, 3, 3, 2, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 6, 6, 6, 6, 7, 6, 6, 1, 6,
    6, 6, 7, 7, 7, 7, 7, 7, 3, 3, 2, 3, 3, 3, 3, 3, 3, 5, 5, 5,
    5, 5, 3, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7,
    7, 7, 7, 6, 7, 7, 7, 7, 2, 2, 2, 2, 3, 3, 2, 3, 3, 4, 4, 3,
    5, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 1, 6, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 2, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 6, 6, 6, 6, 6, 6, 7, 7,
    1, 6, 7, 7, 7, 7, 7, 2, 3, 3, 3, 3, 3, 5, 3, 3, 5, 5, 3, 5,
    5, 5, 5, 1, 5, 4, 5, 6, 7, 6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 7,
    7, 7, 6, 7, 7, 7, 3, 3, 3, 3, 5, 3, 3, 5, 3, 5, 5, 5, 5, 5,
    3, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 7, 6, 6, 6, 6, 7, 7, 7,
    6, 7, 6, 1, 1, 7, 3, 3, 1, 2, 3, 4, 3, 5, 5, 5, 4, 3, 5, 5,
    5, 5, 4, 5, 5, 4, 5, 5, 5, 6, 6, 6, 6, 7, 6, 6, 6, 1, 7, 7,
    6, 6, 7, 7, 7, 3, 2, 2, 3, 3, 3, 5, 3, 3, 3, 5, 5, 5, 5, 3,
    5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 1,
    7, 6, 7, 1, 7, 3, 3, 4, 4, 5
]

const data = nameSource.map((itemNine, index) => {
    return {
        name: itemNine,
        value: valueSource[index]
    }
})

const option = {
    theme: 'light',
    // 图表类型(蜂窝热力图)
    type: 'HexagonHeatMapChart',
    // padding控制图表距离容器的上、右、下、左padding值
    padding: [50, 30, 20, 20],
    // 蜂窝的颜色变化数组,根据颜色数组的颜色个数n,将data数据按照最小值到最大值均分为n个区间,图表各项的颜色取各数据所在区间的颜色
    color: ['#FFFFFF', '#448DFF', '#4350EA', '#33307C', '#242648', '#973152', '#F8364D'],
    // 蜂窝的排列数量,默认值40,
    quantity: 40,
    data: data
};



